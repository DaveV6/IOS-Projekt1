#!/bin/bash                 
# xbujzad00 David BujzaÅ¡ 
# 26.2.2024

export POSIXLY_CORRECT=yes
export LC_ALL=C

after=""
before=""
currency=""
com=""
user=""

helpMessage() {
    echo "Usage: $0 [-h|--help] [FILTER] [COMMAND] USER LOG [LOG2 [...]"
    echo "Help:"
    echo "  -h, --help      Display this help message"
    echo "Filters:"
    echo "  -a              Filter after the input date"
    echo "  -b              Filter before the input date"
    echo "  -c              Filter by currency"
    echo "Commands:"
    echo "  list            List of records for input user"
    echo "  list-currency   Sorted list of currencies in the file"
    echo "  status          Statement of actual account balances grouped and sorted by currency"
    echo "  profit          The customer's account statement with the fictitious return included."
}

# checks if the input date is valid
checkDate() {
    if date -d "$1" > /dev/null 2>&1; then
        return 0
    else
        exit 1
    fi
}

# filters the list
filter() {
    # iterates through each file in the files array
    for file in "${files[@]}"; do
        # checks if the file does not have .gzip file extension
        if [[ $(file -b "$file") != *"gzip compressed data"* ]]; then
            # filters the list with arguments input from .log file by the user using awk
            awk -F ';' -v currency="$currency" -v before="$before" -v after="$after" -v user="$user" '($3 == currency || currency == "") && ($1 == user) && ($2 < before || before == "") && ($2 > after || after == "")' "$file"
        else
            # filters the list with arguments input from .gz file by the user using awk
            gzip -dc "$file" | awk -F ';' -v currency="$currency" -v before="$before" -v after="$after" -v user="$user" '($3 == currency || currency == "") && ($1 == user) && ($2 < before || before == "") && ($2 > after || after == "")'
        fi
    done
}

# lists the users currency
listCurrency() {
    filter | awk -F ';' '{print $3}' | sort | uniq
}

# sums up all the currencies into one
status() {
    filter | awk -F ';' '{sum[$3] += $4} 
    END {
        for(currency in sum) {
            printf "%s : %.4f\n", currency, sum[currency]
        }
    }' | sort
}

# sums up all the currencies into one, if they are greater than 0 adds up profit
# if XTF_PROFIT is not set, sets it to default value (20)
profit() {
    filter | awk -F ';' -v profit="$XTF_PROFIT" '{sum[$3] += $4} 
    END {
        for(currency in sum) {
            if(sum[currency] > 0) {
                if(profit == "") {
                    profit = 20
                }
                sum[currency] *= 1 + profit/100
            }
            printf "%s : %.4f\n", currency, sum[currency]
        }
    }' | sort
}

# if there are no arguments output error
if [ $# -eq 0 ]; then
    echo "Invalid argument: At least one argument is required." >&2
    exit 1
fi

# if the first index is -h or --help output the help message
case "$1" in 
    "-h" | "--help")
        helpMessage
        exit 0
        ;;
esac

# parsing filter arguments
while getopts "a:b:c:" opt; do
    case $opt in
        a)
            if [ -n "$after" ]; then
                exit 1
            fi

            if  checkDate "$OPTARG"; then
                after=$OPTARG
            fi
            ;;
        b)
            if [ -n "$before" ]; then
                exit 1
            fi

            if checkDate "$OPTARG"; then
                before=$OPTARG
            fi
            ;;
        c)
            currency="$OPTARG"
            ;;
        *)
            exit 1 
            ;;
    esac
done

# shifts filters
shift $((OPTIND-1))

# sets com variable to the user input command
case "$1" in
    "list" | "list-currency" | "status" | "profit")
        com="$1"
        shift
        ;;
    *)
        com="list"
        ;;
esac

# if the string on index 1 is not empty or is not a file sets user to string on index 1
if [ -n "$1" ] && [ ! -f "$1" ]; then
    user="$1"
    shift
else
    exit 1
fi

files=("$@")

# iterates through files array and checks if the file is valid
for file in "${files[@]}"; do
    if [ ! -f "$file" ]; then
        echo "$file is not a valid file." >&2
        exit 1
    fi
done

# if there are no files input output error message
if [ ${#files[@]} -eq 0 ]; then
    echo "No files were input" >&2
    exit 1
fi

# iterates through files array and checks if the input file has the wrong amount of columns
for file in "${files[@]}"; do
    awk '{if (NF > 4) {printf "The file has more than 4 columns"; exit 1;}}' "$file"
done

# switches commands based on user input
case "$com" in
    "list")
        filter
        ;;
    "list-currency")
        listCurrency
        ;;
    "status")
        status
        ;;
    "profit")
        profit
        ;;
    *)
        exit 1
        ;;
esac
